// SPDX-License-Identifier: GPL-3.0
pragma solidity 0.8.27;

import {IState} from "./IState.sol";

struct AuthResponseField {
    string name;
    uint256 value;
}

/**
 * @dev IAuthValidator. Interface for verification of auth data.
 */
interface IAuthValidator {
    /**
     * @dev Get version of the contract
     */
    function version() external view returns (string memory);

    /**
     * @dev Verify the proof with the supported method informed in the auth query data
     * packed as bytes and that the proof was generated by the sender.
     * @param proof Proof packed as bytes to verify.
     * @param params Request query data of the credential to verify.
     * @param sender Sender of the proof.
     * @param state State contract to get identities and gist states to check.
     * @param expectedNonce Expected nonce hash calculated to check
     * @return userID User Id for the auth proof verified.
     */
    function verify(
        address sender,
        bytes calldata proof,
        bytes calldata params
    ) external returns (uint256 userID, AuthResponseField[] memory authResonseFields);
}
